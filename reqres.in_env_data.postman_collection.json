{
	"info": {
		"_postman_id": "5b27c8c3-0df4-461b-92ec-a6a3d82e00cb",
		"name": "reqres.in_env_data",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31686415"
	},
	"item": [
		{
			"name": "List users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							"pm.collectionVariables.set(\"numberPage\", 1);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"firstUserId\", pm.response.json().data[0].id);",
							"pm.collectionVariables.set(\"test\", 155);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users?page={{numberPage}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "{{numberPage}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "single user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"console.log(pm.collectionVariables.get(\"test\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users/{{firstUserId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"{{firstUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "SINGLE USER NOT FOUND",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response body contains expected data\", function () { ",
							"    pm.expect(pm.response.text()).to.include(\"{}\"); ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function getRandomInt(min, max) {",
							"  min = Math.ceil(min);",
							"  max = Math.floor(max);",
							"  return Math.floor(Math.random() * (max - min) + min); // Максимум не включается, минимум включается",
							"}",
							"let number = getRandomInt(120,140);",
							"pm.collectionVariables.set(\"randomNumber\", number);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/unknown/{{randomNumber}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"unknown",
						"{{randomNumber}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "List <resource>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.collectionVariables.set(\"userName\", pm.response.json().data[0].name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/unknown",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single <resource>",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/unknown/{{firstUserId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"unknown",
						"{{firstUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single <resource> not found",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/unknown/{{randomNumber}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"unknown",
						"{{randomNumber}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response schema validation\", function () { ",
							"const schema = { ",
							"    \"name\": \"string\", ",
							"    \"job\": \"string\",",
							"    \"id\": \"number\",",
							"    \"createdAt\": \"date\"",
							"}; ",
							"pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true; });",
							"",
							"let updateObject = pm.response.json();",
							"delete updateObject.id;",
							"delete updateObject.createdAt;",
							"updateObject.job = pm.environment.get(\"job\");",
							"console.log(updateObject);",
							"pm.collectionVariables.set(\"updateObject\", JSON.stringify(updateObject));",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Test all type data\", function(){",
							"    const responseJson = pm.response.json();",
							"    ",
							"    pm.expect(responseJson.name).to.eql(pm.collectionVariables.get(\"userName\"));",
							"",
							"    pm.expect(responseJson.name).to.be.a('string');",
							"",
							"    pm.expect(responseJson.name).to.be.length(8);",
							"});",
							"",
							"pm.test(\"Test header is present\", function(){",
							"    pm.expect(pm.response.headers.get('Server')).to.be.eql(\"cloudflare\")",
							"})",
							"",
							"pm.test(\"Value is valid list\", ()=>{",
							"    pm.expect(pm.response.json().name).to.be.oneOf([\"cerulean\", \"QA Engineer\"]);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"userJob\", \"QA Engineer\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{userName}}\",\n    \"job\": \"{{userJob}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let newUpdateObject = pm.response.json();",
							"delete newUpdateObject.updatedAt;",
							"newUpdateObject.name = \"Heisenberg\";",
							"console.log(newUpdateObject);",
							"pm.collectionVariables.set(\"updateObject\", JSON.stringify(newUpdateObject));",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{updateObject}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/{{userId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Chaining multiple assertions\", function () { ",
							"    pm.expect(pm.response.json().name).to.not.eql(pm.collectionVariables.get(\"userName\"));",
							"    pm.expect(pm.response.json().job).to.not.eql(pm.collectionVariables.get(\"userJob\")); ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{updateObject}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/{{userId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users/{{userId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "register - successfull",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register - unsuccessfull",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"sydney@fife\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "login - successfull",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login - unsuccessfull",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"peter@klaven\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "delayed response",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users?delay=3",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "numberPage",
			"value": ""
		},
		{
			"key": "firstUserId",
			"value": ""
		},
		{
			"key": "test",
			"value": ""
		},
		{
			"key": "randomNumber",
			"value": ""
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "userJob",
			"value": ""
		},
		{
			"key": "updateObject",
			"value": ""
		}
	]
}